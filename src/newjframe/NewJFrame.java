package newjframe;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import javax.swing.JOptionPane;
import DbHelper.DataBaseConnection;
import DbHelper.Db_Helper;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.SQLSyntaxErrorException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
/**
 *
* @author Peter Foster Gartzke <gpeterdeveloper@gmail.com>
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
     Db_Helper dbHelper;
    Connection conn;
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */public NewJFrame() throws SQLException, IOException, ClassNotFoundException {
        initComponents();
        conn = DataBaseConnection.getConnection();
        dbHelper = new Db_Helper(conn);
    }

    
    
    
    
    
    
    
    
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane1 = new java.awt.ScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        input = new javax.swing.JTextArea();
        message = new javax.swing.JTextField();
        submitButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        scrollPane2 = new java.awt.ScrollPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        output = new javax.swing.JTextArea();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        input.setColumns(20);
        input.setRows(5);
        jScrollPane1.setViewportView(input);

        scrollPane1.add(jScrollPane1);

        message.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                messageMouseReleased(evt);
            }
        });

        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        output.setColumns(20);
        output.setRows(5);
        output.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                outputMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(output);

        scrollPane2.add(jScrollPane2);

        jMenu1.setText("About");
        jMenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenu1MousePressed(evt);
            }
        });
        jMenuBar2.add(jMenu1);

        jMenu2.setText("Exit");
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenu2MousePressed(evt);
            }
        });
        jMenuBar2.add(jMenu2);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(message, javax.swing.GroupLayout.PREFERRED_SIZE, 627, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(submitButton)
                        .addGap(18, 18, 18)
                        .addComponent(clearButton))
                    .addComponent(scrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(scrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 836, Short.MAX_VALUE))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(message, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(submitButton)
                    .addComponent(clearButton))
                .addGap(31, 31, 31)
                .addComponent(scrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
         String usersInput = input.getText();
        String[] inputKeyWord = usersInput.split(" ");
        Statement stat;
        
        switch (inputKeyWord[0].toLowerCase()){
            
            case "create":
                    try{  // setsup an object of the statment interface by using a method of the Connection object
                            stat = conn.createStatement();
                            boolean oK = stat.execute(usersInput);
                            if (!oK){ 
                                message.setText("Create Successful") ;
                                output.setText("");
                            }
                        }//end of try

                    catch (SQLSyntaxErrorException syn)
                   {
                       message.setText(syn.getMessage());
                   } catch (SQLException ex) {
                     Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                 }//end of catch

                break;
            case "insert":
                    try{  // setsup an object of the statment interface by using a method of the Connection object
                        stat = conn.createStatement();
                        int oK = stat.executeUpdate(usersInput);
                        
                        if (oK > 0){
                            message.setText("Insert Successful") ;
                            output.setText("");
                        }

                    }//end of try

                    catch (SQLSyntaxErrorException syn){
                        message.setText(syn.getMessage());
                    } catch (SQLException ex) {
                        Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }//end of catch
      
                break;
            case "select":
                
                 try {  // setsup an object of the statment interface by using a method of the Connection object
                        stat = conn.createStatement();
                        ResultSet resultProduct = stat.executeQuery(usersInput);
                        
                        if(resultProduct!=null){
                            message.setText("Query Successful") ;
                        }

                        ResultSetMetaData meta = resultProduct.getMetaData();
                        int numColumns = meta.getColumnCount();
                        String gotTheResult= "";
                        
                        while(resultProduct.next())  //this is the CURSOR
                     {
                         for (int x = 1; x <= numColumns; x++)  //movement between columns
                         {   if (x > 1)
                                gotTheResult = gotTheResult +", ";
                             gotTheResult = gotTheResult +resultProduct.getString(x);
                             if (x == numColumns)
                                 gotTheResult = gotTheResult +"\n";
                         }//end for loop  

                         
                     }//end while
                        output.setText(gotTheResult);
        
                    }catch (SQLSyntaxErrorException syn){
                        message.setText(syn.getMessage());
                    }  catch (SQLException ex) {
                          Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                      }//end of try

                break;
                
                
            case "update":
                try{
                        stat = conn.createStatement();
                        int oK = stat.executeUpdate(usersInput);
                        if (oK > 0){
                            message.setText("Update Successful") ;
                            output.setText("");
                        }
                        
                    }
                    catch (SQLSyntaxErrorException syn)
                   {
                       message.setText(syn.getMessage());
                   } catch (SQLException ex) {
                     Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                 }//end of catch
                break;
            case "delete":
                
                try{
                    stat = conn.createStatement();
                    boolean ok =stat.execute(usersInput);
                    
                    if (!ok){
                      message.setText("Delete Successful") ;
                      output.setText("");
                    }
        
                    }//end of try
                catch (SQLSyntaxErrorException syn)
                    {
                        message.setText(syn.getMessage());
                    } catch (SQLException ex) {
                      Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                  }//end of catch

                
                
                break;
            case "drop":
                
                try{  // setsup an object of the statment interface by using a method of the Connection object
                        stat = conn.createStatement();
                        boolean ok = stat.execute(usersInput);
                        
                        if (!ok){
                      message.setText("Drop Successful") ;
                      output.setText("");
                    }
        
                    }//end of try

                 catch (SQLSyntaxErrorException syn)
                    {
                        message.setText(syn.getMessage());
                    } catch (SQLException ex) {
                      Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                  }//end of catch

                
                
                
                
                break;
            }
        
   
    }//GEN-LAST:event_submitButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
          input.setText("");
        output.setText("");
        message.setText("");
        input.requestFocus();
    }//GEN-LAST:event_clearButtonActionPerformed

    private void outputMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_outputMouseReleased
         input.requestFocus();
    }//GEN-LAST:event_outputMouseReleased

    private void messageMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_messageMouseReleased
        input.requestFocus();
    }//GEN-LAST:event_messageMouseReleased

    private void jMenu1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu1MousePressed
         JOptionPane.showMessageDialog(null, "Peter Foster Gartzke\n12-1-17");
        input.requestFocus();
    }//GEN-LAST:event_jMenu1MousePressed

    private void jMenu2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MousePressed
        try {
            dbHelper.closeAndDrop();
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.exit(0);
    }//GEN-LAST:event_jMenu2MousePressed

           
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException, ClassNotFoundException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new NewJFrame().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        
        DataBaseConnection.init(args[0]);//pass command line String arg to databaseConnection
        
        
        
        
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearButton;
    private javax.swing.JTextArea input;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField message;
    private javax.swing.JTextArea output;
    private java.awt.ScrollPane scrollPane1;
    private java.awt.ScrollPane scrollPane2;
    private javax.swing.JButton submitButton;
    // End of variables declaration//GEN-END:variables
}
